modeltype MDSDTEAM17 uses 'http://www.example.org/mdsdteam17';
modeltype PCM uses 'http://palladiosimulator.org/PalladioComponentModel/5.2';

transformation EnvironmentTransformation(in MDSD : MDSDTEAM17, out PCM);

main() {
	var asds = MDSD.objects()[MDSDTEAM17::environment::Environment];
 	asds->map env2PCM();
 	var repository = MDSD.objects()[MDSDTEAM17::repository::Repository];
 	repository->map repo2PCM();
}

//Environment View
mapping MDSDTEAM17::environment::Environment::env2PCM() : PCM::resourceenvironment::ResourceEnvironment {
	entityName := self.name;
	resourceContainer_ResourceEnvironment := self.containers.map container2PCM();
	linkingResources__ResourceEnvironment := self.containerLinks.map link2PCM();
}

mapping MDSDTEAM17::environment::Container::container2PCM() : PCM::resourceenvironment::ResourceContainer {
	entityName := self.name;
	id := self.name;
}

mapping MDSDTEAM17::environment::Link::link2PCM() : PCM::resourceenvironment::LinkingResource {
	entityName := self.name;
	id := self.name;
	connectedResourceContainers_LinkingResource := 
		self.containers.resolveIn(MDSDTEAM17::environment::Container::container2PCM, PCM::resourceenvironment::ResourceContainer);
	var o = object PCM::resourceenvironment::CommunicationLinkResourceSpecification {
		communicationLinkResourceType_CommunicationLinkResourceSpecification := new PCM::resourcetype::CommunicationLinkResourceType();
		latency_CommunicationLinkResourceSpecification := new PCM::core::PCMRandomVariable();
		throughput_CommunicationLinkResourceSpecification := new PCM::core::PCMRandomVariable();
	};
	
	communicationLinkResourceSpecifications_LinkingResource := o;
}

//Repository View
mapping MDSDTEAM17::repository::Repository::repo2PCM() : PCM::repository::Repository {
	id := self.name;
	var datatypes := MDSD.objects()[MDSDTEAM17::repository::SimpleType]->map simpleDT2PCM()
		->union(MDSD.objects()[MDSDTEAM17::repository::ComplexType]->map complexDT2PCM())
		->union(MDSD.objects()[MDSDTEAM17::repository::Type]->select(x | x.name = "void")->map void2PCM())
		->asSequence();
	dataTypes__Repository := datatypes;
	interfaces__Repository := self.interfaces->map interface2PCM(datatypes->asSet());
	components__Repository := self.components->map basicComp2PCM().asRepositoryComponent()
		->union(self.components[PCM::repository::CompositeComponent]->map composite2PCM().asRepositoryComponent())->asSequence();
}

// Components
mapping MDSDTEAM17::repository::Component::basicComp2PCM() : PCM::repository::BasicComponent 
	when { self.oclIsTypeOf(MDSDTEAM17::repository::Component) }
{
	entityName := self.name;
	id := self.name;
}

query PCM::repository::BasicComponent::asRepositoryComponent() : PCM::repository::RepositoryComponent {
	return self.oclAsType(PCM::repository::RepositoryComponent)
}

query PCM::repository::CompositeComponent::asRepositoryComponent() : PCM::repository::RepositoryComponent {
	return self.oclAsType(PCM::repository::RepositoryComponent)
}

// Composite Components
mapping MDSDTEAM17::assembly::CompositeComponent::composite2PCM() : PCM::repository::CompositeComponent 
	when { self.oclIsTypeOf(MDSDTEAM17::assembly::CompositeComponent) }
{
	entityName := self.name;
	id := self.name;
}

//Interfaces, Signaturen und Parameter
mapping MDSDTEAM17::repository::Interface::interface2PCM(in datatypes : Set(PCM::repository::CompositeDataType)) : PCM::repository::OperationInterface {
	id := self.name;
	signatures__OperationInterface := self.signatures->map signature2PCM(datatypes);
	
}

mapping MDSDTEAM17::repository::Signature::signature2PCM(in datatypes : Set(PCM::repository::CompositeDataType)) : PCM::repository::OperationSignature {
	id := self.name;
	returnType__OperationSignature := datatypes->any(x | x.id = self.returnType.name);
	parameters__OperationSignature := self.parameters->map parameter2PCM(datatypes->reject(x | x.id = "void"));
}

mapping MDSDTEAM17::repository::SignatureParameter::parameter2PCM(in datatypes : Set(PCM::repository::CompositeDataType)) : PCM::repository::Parameter {
	parameterName := self.name;
	dataType__Parameter := datatypes->any(x | x.id = self.type.name);
}

//Datentypen
mapping MDSDTEAM17::repository::Type::void2PCM() : PCM::repository::CompositeDataType {
	id := "void";
}

mapping MDSDTEAM17::repository::ComplexType::complexDT2PCM() : PCM::repository::CompositeDataType {
	id := self.name;
}

mapping MDSDTEAM17::repository::SimpleType::simpleDT2PCM() : PCM::repository::CompositeDataType {
	id := self.name
}
