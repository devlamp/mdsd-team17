modeltype MDSDTEAM17 uses 'http://www.example.org/mdsdteam17';
modeltype PCM uses 'http://palladiosimulator.org/PalladioComponentModel/5.2';

transformation EnvironmentTransformation(in MDSD : MDSDTEAM17, out PCM);

main() {
	var asds = MDSD.objects()[MDSDTEAM17::environment::Environment];
 	asds->map env2PCM();
 	
 	var repository = MDSD.objects()[MDSDTEAM17::repository::Repository];
 	repository->map repo2PCM();
 	
 	var systems = MDSD.objects()[MDSDTEAM17::assembly::CompositeComponent]->select(x | x.isSystem());
 	systems->map system2PCM();
}

//Allocation View
mapping MDSDTEAM17::allocation::Allocation::allocation2PCM() : PCM::allocation::Allocation {
	id := self.name;
	entityName := self.name;
	//allocationContexts_Allocation := self.allocationcontexts.map allocContext2PCM();
}

mapping MDSDTEAM17::allocation::AllocationContext::allocContext2PCM() : PCM::allocation::AllocationContext {
}

//Environment View
mapping MDSDTEAM17::environment::Environment::env2PCM() : PCM::resourceenvironment::ResourceEnvironment {
	entityName := self.name;
	resourceContainer_ResourceEnvironment := self.containers.map container2PCM();
	linkingResources__ResourceEnvironment := self.containerLinks.map link2PCM();
}

mapping MDSDTEAM17::environment::Container::container2PCM() : PCM::resourceenvironment::ResourceContainer {
	entityName := self.name;
	id := self.name;
}

mapping MDSDTEAM17::environment::Link::link2PCM() : PCM::resourceenvironment::LinkingResource {
	entityName := self.name;
	id := self.name;
	connectedResourceContainers_LinkingResource := 
		self.containers.resolveIn(MDSDTEAM17::environment::Container::container2PCM);
	
	/* The "new PCM::core::PCMRandomVariable();" call crashes the model validation of the root node.
	var o = object PCM::resourceenvironment::CommunicationLinkResourceSpecification {
		communicationLinkResourceType_CommunicationLinkResourceSpecification := new PCM::resourcetype::CommunicationLinkResourceType();
		latency_CommunicationLinkResourceSpecification := new PCM::core::PCMRandomVariable();
		throughput_CommunicationLinkResourceSpecification := new PCM::core::PCMRandomVariable();
	};
	communicationLinkResourceSpecifications_LinkingResource := o;
	*/
}

mapping MDSDTEAM17::assembly::CompositeComponent::system2PCM() : PCM::system::System 
{
	entityName := self.name;
	id := self.name;
	providedRoles_InterfaceProvidingEntity := self.providedInterfaces.map providedInterface2PCMRole(self);
	requiredRoles_InterfaceRequiringEntity := self.requiredInterfaces.map requiredInterface2PCMRole(self);
	assemblyContexts__ComposedStructure := self.elements.map assemblyContext2PCM(self);
}

//Repository View
mapping MDSDTEAM17::repository::Repository::repo2PCM() : PCM::repository::Repository {
	id := self.name;
	entityName := self.name;
	dataTypes__Repository := MDSD.objects()[MDSDTEAM17::repository::Type]->map type2PCM();
	interfaces__Repository := self.interfaces->map interface2PCM();
	components__Repository := self.components->select(x | not x.isSystem())->map componentOrCompositionComponent2PCM();
}

mapping MDSDTEAM17::assembly::AssemblyContext::assemblyContext2PCM(component : MDSDTEAM17::repository::Component) : PCM::core::composition::AssemblyContext {
	var roleName = self.name + "_Inside_" + component.name + "_AssemblyContext";
	id := roleName;
	entityName := roleName;
	encapsulatedComponent__AssemblyContext := self.component.late resolveoneIn(MDSDTEAM17::repository::Component::componentOrCompositionComponent2PCM);
}

mapping MDSDTEAM17::assembly::AssemblyConnector::assemblyConnector2PCM(component : MDSDTEAM17::repository::Component) : PCM::core::composition::AssemblyConnector {
	var roleName = "From_" + self.provider.name + "_To_" + self.consumer.name + "_Of_" + self.interface.name + "_Inside_" + component.name + "_AssemblyConnector";
	id := roleName;
	entityName := roleName;
	requiringAssemblyContext_AssemblyConnector := self.consumer.late resolveoneIn(MDSDTEAM17::assembly::AssemblyContext::assemblyContext2PCM);
	providingAssemblyContext_AssemblyConnector := self.provider.late resolveoneIn(MDSDTEAM17::assembly::AssemblyContext::assemblyContext2PCM);
	requiredRole_AssemblyConnector := self.consumer.late resolveoneIn(MDSDTEAM17::repository::Interface::requiredInterface2PCMRole);
	providedRole_AssemblyConnector := self.consumer.late resolveoneIn(MDSDTEAM17::repository::Interface::providedInterface2PCMRole);
}

mapping MDSDTEAM17::assembly::DelegationConnector::providedDelegationConnector2PCM(component : MDSDTEAM17::repository::Component) : PCM::core::composition::ProvidedDelegationConnector {
	var roleName = "Delegating_" + self.delegationType.toString() + "_From_" + self.assemblyContext.name + "_Of_" + self.interface.name + "_Inside_" + component.name + "_DelegationConnector";
	id := roleName;
	entityName := roleName;
	assemblyContext_ProvidedDelegationConnector := self.assemblyContext.late resolveoneIn(MDSDTEAM17::assembly::AssemblyContext::assemblyContext2PCM);
	innerProvidedRole_ProvidedDelegationConnector := self.interface.late resolveoneIn(MDSDTEAM17::repository::Interface::providedInterface2PCMRole);
	outerProvidedRole_ProvidedDelegationConnector := self.interface.late resolveoneIn(MDSDTEAM17::repository::Interface::providedInterface2PCMRole);
}

mapping MDSDTEAM17::assembly::DelegationConnector::requiredDelegationConnector2PCM(component : MDSDTEAM17::repository::Component) : PCM::core::composition::RequiredDelegationConnector {
	var roleName = "Delegating_" + self.delegationType.toString() + "_From_" + self.assemblyContext.name + "_Of_" + self.interface.name + "_Inside_" + component.name + "_DelegationConnector";
	id := roleName;
	entityName := roleName;
	assemblyContext_RequiredDelegationConnector := self.assemblyContext.late resolveoneIn(MDSDTEAM17::assembly::AssemblyContext::assemblyContext2PCM);
	innerRequiredRole_RequiredDelegationConnector := self.interface.late resolveoneIn(MDSDTEAM17::repository::Interface::requiredInterface2PCMRole);
	outerRequiredRole_RequiredDelegationConnector := self.interface.late resolveoneIn(MDSDTEAM17::repository::Interface::requiredInterface2PCMRole);
}

mapping MDSDTEAM17::repository::Component::componentOrCompositionComponent2PCM() : PCM::repository::RepositoryComponent {
	init {
		if (self.oclIsTypeOf(MDSDTEAM17::repository::Component)) {
			result := self.map component2PCM();
		} else {
			result := self.oclAsType(MDSDTEAM17::assembly::CompositeComponent).map compositComponent2PCM();	
		}
	}
}

mapping MDSDTEAM17::repository::Component::component2PCM() : PCM::repository::BasicComponent {
	entityName := self.name;
	id := self.name;
	providedRoles_InterfaceProvidingEntity := self.providedInterfaces.map providedInterface2PCMRole(self);
	requiredRoles_InterfaceRequiringEntity := self.requiredInterfaces.map requiredInterface2PCMRole(self);
}

mapping MDSDTEAM17::assembly::CompositeComponent::compositComponent2PCM() : PCM::repository::CompositeComponent {

	var assConnectors = self.assemblyconnectors.map assemblyConnector2PCM(self);
	var delConnectors = self.delegationconnectors.map providedDelegationConnector2PCM(self);
	
	entityName := self.name;
	id := self.name;
	providedRoles_InterfaceProvidingEntity := self.providedInterfaces.map providedInterface2PCMRole(self);
	requiredRoles_InterfaceRequiringEntity := self.requiredInterfaces.map requiredInterface2PCMRole(self);
	assemblyContexts__ComposedStructure := self.elements.map assemblyContext2PCM(self);
	connectors__ComposedStructure := assConnectors->union(delConnectors);
}

mapping MDSDTEAM17::repository::Interface::providedInterface2PCMRole(component: MDSDTEAM17::repository::Component) : PCM::repository::OperationProvidedRole {
	var roleName = component.name + "_" + self.name + "_ProvidedRole";
	entityName := roleName;
	id := roleName;
	providedInterface__OperationProvidedRole := self.resolveoneIn(MDSDTEAM17::repository::Interface::interface2PCM);
}

mapping MDSDTEAM17::repository::Interface::requiredInterface2PCMRole(component: MDSDTEAM17::repository::Component) : PCM::repository::OperationRequiredRole {
	var roleName = component.name + "_" + self.name + "_RequiredRole";
	entityName := roleName;
	id := roleName;
	requiredInterface__OperationRequiredRole := self.resolveoneIn(MDSDTEAM17::repository::Interface::interface2PCM);
}

//Interfaces, Signaturen und Parameter
mapping MDSDTEAM17::repository::Interface::interface2PCM() : PCM::repository::OperationInterface {
	var roleName = "I" + self.name;
	entityName := roleName;
	id := roleName;
	signatures__OperationInterface := self.signatures->map signature2PCM();
}

mapping MDSDTEAM17::repository::Signature::signature2PCM() : PCM::repository::OperationSignature {
	id := self.name;
	entityName := self.name;
	returnType__OperationSignature := self.returnType.resolveoneIn(MDSDTEAM17::repository::Type::type2PCM, PCM::repository::DataType);
	parameters__OperationSignature := self.parameters->map parameter2PCM();
}

mapping MDSDTEAM17::repository::SignatureParameter::parameter2PCM() : PCM::repository::Parameter {
	parameterName := self.name;
	dataType__Parameter := self.type.resolveoneIn(MDSDTEAM17::repository::Type::type2PCM, PCM::repository::DataType);
}

//Datentypen
mapping MDSDTEAM17::repository::Type::type2PCM() : PCM::repository::CompositeDataType {
	id := self.name;
	entityName := self.name;
}

query MDSDTEAM17::repository::Component::isSystem() : Boolean {
	return self.name->toLower()->includes('system') and self.oclIsKindOf(MDSDTEAM17::assembly::CompositeComponent);
}
