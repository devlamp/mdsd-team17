// automatically generated by Xtext
grammar mdsdteam17.cmdsl.ComponentModel with org.eclipse.xtext.common.Terminals


import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/mdsdteam17/model/mdsdteam17.ecore"
import "platform:/resource/mdsdteam17/model/mdsdteam17.ecore#//repository" as repository
import "platform:/resource/mdsdteam17/model/mdsdteam17.ecore#//componentbehavior" as componentbehavior
import "platform:/resource/mdsdteam17/model/mdsdteam17.ecore#//environment" as environment
import "platform:/resource/mdsdteam17/model/mdsdteam17.ecore#//allocation" as allocation
import "platform:/resource/mdsdteam17/model/mdsdteam17.ecore#//assembly" as assembly


Modelcontainer returns Modelcontainer:
	{Modelcontainer}
	'types'
	BEGIN
		('simple' types+=SimpleType ( "," types+=SimpleType)* )*
		('complex' types+=ComplexType ( "," types+=ComplexType)* )*
	END
	(views+=View)*
	;

View returns View:
	RepositoryView | AllocationView | EnvironmentView
;

RepositoryView returns repository::Repository:
	'repository' name=ID
	BEGIN
		(interfaces+=RepositoryInterface | components+=RepositoryComponent | components+=RepositoryComposite)+
	END
;

RepositoryInterface returns repository::Interface:
	'interface' name=ID
	BEGIN
		(signatures+=InterfaceSignature)+
	END
;

InterfaceSignature returns repository::Signature:
	returnType=[repository::Type] name=ID '(' (parameters+=InterfaceSignatureParameter ( ',' parameters+=InterfaceSignatureParameter)*)? ')'
;

InterfaceSignatureParameter returns repository::SignatureParameter:
	type=[repository::ParameterType] name=ID
;

RepositoryComponent returns repository::Component:
	'component' name=ID
	BEGIN
		('provides' providedInterfaces+=[repository::Interface])+
		('requires' requiredInterfaces+=[repository::Interface])*
		('behavior' behaviors+=Behavior)*
	END
;

BlockStatement returns componentbehavior::BlockStatement:
	(statements+=BranchStatement | statements+=LoopStatement | statements+=InternalAction | statements+=ExternalAction)+
;

BranchStatement returns componentbehavior::BranchStatement:
	{componentbehavior::BranchStatement}
	'if'
	BEGIN
	 	ifStatements=BlockStatement?
	END
	('else'
	BEGIN
		elseStatements=BlockStatement?
	END)?
;

LoopStatement returns componentbehavior::LoopStatement:
	'for'
	BEGIN
		statements=BlockStatement
	END
;

InternalAction returns componentbehavior::InternalAction:
	{componentbehavior::InternalAction}
	'demand'
;

ExternalAction returns componentbehavior::ExternalAction:
	'external' service=[repository::Signature]
;

Behavior returns componentbehavior::BehaviorDescription:
	signature=[repository::Signature]
	BEGIN
		statements=BlockStatement
	END
;

RepositoryComposite returns assembly::CompositeComponent:
	'composite' name=ID
	BEGIN
		(elements+=AssemblyContext)+
		(delegationconnectors+=ProvidedDelegationConnector)+
		(delegationconnectors+=RequiredDelegationConnector)+
		(assemblyconnectors+=AssemblyConnector)+
	END
;

AssemblyConnector returns assembly::AssemblyConnector:
	'connects' interface=[repository::Interface] 'from' provider=[assembly::AssemblyContext] 'to' consumer=[assembly::AssemblyContext]
;

ProvidedDelegationConnector returns assembly::DelegationConnector:
	delegationType=ProvidedDelegationType interface=[repository::Interface] 'delegated' 'to' assemblyContext=[assembly::AssemblyContext]
;

RequiredDelegationConnector returns assembly::DelegationConnector:
	delegationType=RequiredDelegationType interface=[repository::Interface] 'delegated' 'from' assemblyContext=[assembly::AssemblyContext]
;

enum ProvidedDelegationType returns assembly::DelegationType:
	Provided = "provides"
;

enum RequiredDelegationType returns assembly::DelegationType:
	Required = "requires"
;

AssemblyContext returns assembly::AssemblyContext:
	'contains' component=[repository::Component] ('as' name=ID)?
;

AllocationView returns allocation::Allocation:
	'allocation' name=ID 'of' compositecomponent=[assembly::CompositeComponent] 'on' environment=[environment::Environment]
	BEGIN
		(allocationcontexts+=AllocationContext)+
	END
;

AllocationContext returns allocation::AllocationContext:
	'allocate' topLevelContext=[assembly::AssemblyContext] 'on' container=[environment::Container]
;

EnvironmentView returns environment::Environment:
	'environment' name=ID
	BEGIN
		(containers+=Container)+
		(containerLinks+=ContainerLink)*
	END
;

ContainerLink returns environment::Link:
	'link' name=ID 'links' 
	BEGIN
		(containers+=[environment::Container])*
	END
;

Container returns environment::Container:
	'container' name=ID
;

SimpleType returns repository::SimpleType:
	name=ID;

ComplexType returns repository::ComplexType:
	name=ID;

// The following synthetic tokens are used for the indentation-aware blocks
terminal BEGIN: 'synthetic:BEGIN';  // increase indentation
terminal END: 'synthetic:END';      // decrease indentation
      