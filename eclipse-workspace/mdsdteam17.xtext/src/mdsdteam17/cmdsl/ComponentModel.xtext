// automatically generated by Xtext
grammar mdsdteam17.cmdsl.ComponentModel with org.eclipse.xtext.common.Terminals


import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/mdsdteam17/model/mdsdteam17.ecore"
import "platform:/resource/mdsdteam17/model/mdsdteam17.ecore#//repository" as repository
import "platform:/resource/mdsdteam17/model/mdsdteam17.ecore#//componentbehavior" as componentbehavior
import "platform:/resource/mdsdteam17/model/mdsdteam17.ecore#//environment" as environment
import "platform:/resource/mdsdteam17/model/mdsdteam17.ecore#//allocation" as allocation
import "platform:/resource/mdsdteam17/model/mdsdteam17.ecore#//assembly" as assembly

Modelcontainer returns Modelcontainer:
	{Modelcontainer}
	'types'
		('simple' types+=SimpleType ( "," types+=SimpleType)* )*
		('complex' types+=ComplexType ( "," types+=ComplexType)* )*
	
	(views+=View)*
	;

View returns View:
	RepositoryView | AllocationView | EnvironmentView
;

RepositoryView returns repository::Repository:
	'repository' name=ID
		(interfaces+=RepositoryInterface | components+=RepositoryComponent | components+=RepositoryComposite)*
;

RepositoryInterface returns repository::Interface:
	'interface' name=ID
		(signatures+=InterfaceSignature)*
;

InterfaceSignature returns repository::Signature:
	returnType=[repository::Type] name=ID '(' (parameters+=InterfaceSignatureParameter ( ',' parameters+=InterfaceSignatureParameter)*)? ')'
;

InterfaceSignatureParameter returns repository::SignatureParameter:
	type=[repository::ParameterType] name=ID
;

RepositoryComponent returns repository::Component:
	'component' name=ID
		('provides' providedInterfaces+=[repository::Interface])+
		('requires' requiredInterfaces+=[repository::Interface])*
		('behavior' behaviors+=Behavior)*
;

BlockStatement returns componentbehavior::BlockStatement:
	{componentbehavior::BlockStatement}
	'block' (statements+=BranchStatement | statements+=LoopStatement | statements+=InternalAction | statements+=ExternalAction)*
;

BranchStatement returns componentbehavior::BranchStatement:
	{componentbehavior::BranchStatement}
	'if'
	 	ifStatements=BlockStatement?
	'else'
		elseStatements=BlockStatement?
;

LoopStatement returns componentbehavior::LoopStatement:
	'for'
		statements=BlockStatement
;

InternalAction returns componentbehavior::InternalAction:
	{componentbehavior::InternalAction}
	'demand'
;

ExternalAction returns componentbehavior::ExternalAction:
	'external' service=[repository::Signature]
;

Behavior returns componentbehavior::BehaviorDescription:
	signature=[repository::Signature]
		statements=BlockStatement
;

RepositoryComposite returns assembly::CompositeComponent:
	'composite' name=ID
;

AllocationView returns allocation::Allocation:
	'allocation' name=ID
;

EnvironmentView returns environment::Environment:
	'environment' name=ID
;

SimpleType returns repository::SimpleType:
	name=ID;

ComplexType returns repository::ComplexType:
	name=ID;
